#!/usr/bin/env python

"""Usage:
  birdy [options] <output-path>

Options:
  --pdb <num>    Fetch num PDBs [default: 0]
  --mmCIF <num>  Fetch num mmCIFs [default: 0]
  --fasta <num>  Fetch num fastas [default: 0]
  -h  --help     Show this screen.
  -v  --verbose  Verbose mode
  -d  --debug    Debug mode
  -n  --no-cache Do not use cache at all
"""

import logging

from docopt import docopt
from schema import Schema, And, Use, SchemaError, Optional

from birdy import fetcher, config, converter
from birdy.utils import Timer


def check_command_arguments(arguments):
    """Data validation

    Checks arguments

    Args:
        args : all arguments

    Returns:
        right arguments
    """

    logging.info('Checking command line arguments...')

    schema = Schema({
        Optional('use_cache'): And(
            Use(bool), error='use_cache should be a boolean'
        ),
        Optional('pdb'): And(
            Use(int), error='pdb should be an integer'
        ),
        Optional('mmCIF'): And(
            Use(int), error='mmCIF should be an integer'
        ),
        Optional('fasta'): And(
            Use(int), error='fasta should be an integer'
        ),
    })

    try:
        cleaned_arguments = schema.validate(arguments)
    except SchemaError as e:
        exit(e)

    return cleaned_arguments


def main():

    arguments = docopt(__doc__)

    use_cache = not arguments['-n']
    pdb = arguments['--pdb']
    mmCIF = arguments['--mmCIF']
    fasta = arguments['--fasta']
    output_path = arguments['<output-path>']

    if arguments['-v']:
        level = logging.INFO
    elif arguments['-d']:
        level = logging.DEBUG
    else:
        level = logging.WARNING

    logging.basicConfig(
        format='%(asctime)s %(levelname)s:%(message)s',
        datefmt='%m/%d/%Y %I:%M:%S %p',
        level=level
    )

    cleaned_arguments = check_command_arguments({
        'use_cache': use_cache,
        'pdb': pdb,
        'mmCIF': mmCIF,
        'fasta': fasta,
    })

    # Formats
    formats = config.FORMATS

    # -- PDB
    if cleaned_arguments.get('pdb', None):
        formats['PDB']['pdb'] = cleaned_arguments['pdb']

    # -- mmCIF
    if cleaned_arguments.get('mmCIF', None):
        formats['PDB']['mmCIF'] = cleaned_arguments['mmCIF']

    # -- mmCIF
    if cleaned_arguments.get('fasta', None):
        formats['NCBI']['fasta'] = cleaned_arguments['fasta']

    logging.info('Started : fetcher')
    fetcher.main(output_path, formats, use_cache)
    logging.info('Fetcher ... ok\n')

    # logging.info('Started : converter')
    # converter.main(directory, use_cache)
    # logging.info('Converter ... ok\n')

    logging.info('The End\n\n')

if __name__ == "__main__":
    with Timer() as t:
        main()
    logging.info("Execution time was {:.3f} s".format(t.secs))
