#!/usr/bin/env python

"""Usage:
  birdy [options] <output-path>

Options:
  -h  --help     Show this screen.
  -v  --verbose  Verbose mode
  -d  --debug    Debug mode
  -n  --no-cache Do not use cache at all
"""

import os
import logging

from docopt import docopt
from schema import Schema, And, Use, SchemaError, Optional

from birdy import fetcher, config, converter


def validation(args):
    """Data validation

    Checks arguments

    Args:
        args : all arguments

    Returns:
        right arguments
    """

    logging.info('Checks arguments')

    schema = Schema({
        Optional('n'): And(
            Use(int),
            lambda n: 1 <= n <= 50,
            error="'family_file_nb' should be an integer between 1 and 50"),
        Optional('m'): And(
            Use(int),
            lambda n: 1 <= n <= 50,
            error="'nb_align' should be an integer between 1 and 50"),
        Optional('fmt_conv'): And(list),
        Optional('search'): And(str, error='search sould be a string'),
        Optional('fpf'): And(
            Use(int), lambda n: 1 <= n <= 99,
            error='file_per_format should be an integer between 1 and 99'),
        Optional('dbN'): And(list, error='db_NCBI should be a list'),
        Optional('dbK'): And(list, error='db_KEGG should be a list'),
        Optional('use_cache'): And(bool, error='use_cache should be a boolean'),
        Optional('dataset'): And(
            str,
            lambda s: '.fasta' not in s,
            error="dataset can't contain '.fasta'"),
        Optional('fmt_fetch'): And(list),
        Optional('log_name'): And(
            Use(str), error="'log_name' sould be a string")})

    try:
        args = schema.validate(args)
    except SchemaError as e:
        exit(e)

    return args


def main():

    arguments = docopt(__doc__)

    use_cache = not arguments['-n']
    output_path = arguments['<output-path>']

    if arguments['-v']:
        level = logging.INFO
    elif arguments['-d']:
        level = logging.DEBUG
    else:
        level = logging.WARNING

    logging.basicConfig(
        format='%(asctime)s %(levelname)s:%(message)s',
        datefmt='%m/%d/%Y %I:%M:%S %p',
        level=level
    )

    args = {
        'n': config.family_file_nb,
        'm': config.nb_align,
        'fmt_conv': config.formats_converter,
        'search': config.search,
        'fpf': config.file_per_format,
        'dbN': config.db_NCBI,
        'dbK': config.db_KEGG,
        'use_cache': use_cache,
        'dataset': config.dataset,
        'fmt_fetch': config.formats_fetcher,
        'log_name': config.log_name
    }
    args = validation(args)

    logging.info('Started : fetcher')
    fetcher.main(output_path, use_cache)
    logging.info('Fetcher ... ok\n')

    # logging.info('Started : converter')
    # converter.main(directory, use_cache)
    # logging.info('Converter ... ok\n')

    logging.info('The End\n\n')

if __name__ == "__main__":
    # execute only if run as a script
    main()
