#!/usr/bin/env python

doc = """Converter.

Usage:
  converter (-i | -w | -e | -c) [-f]
  converter (-h | --help)

Examples:
  converter 

Options:
  -h --help  Show this screen.
  -i         Print INFO, WARNING, ERROR and CRITICAL log
  -w         Print WARNING, ERROR and CRITICAL log
  -e         Print ERROR and CRITICAL log
  -c         Print CRITICAL log
  -f         Print log in file 'converter.log'

      pass


         squizz [-AShlns] [-c format] [-f format] file

OPTIONS

       Following command line options are allowed:

       -A  Restrict detection/verification to alignment formats (conflict with
           -S option).

       -S  Restrict detection/verification to sequence formats (conflict with
           -A option).

       -c format
           Convert detected sequence/alignment into format. This option
           implies strict alignment checking.

       -f format
           Assume input format is format. Do not try to detect the format,
           just verify that the given one is correct.

       -h  Usage display.

       -l  List all supported formats.

       -n  Count and report detected entries. This option is only available
           when the detection is restricted to a single type (with -A or -S
           options) and strict checks (without -s option) are enabled.

       -s  Disable strict format checks (enabled by default).



"""

from docopt import docopt
from Bio_Eutils import Entrez
from schema import Schema, And, Use, SchemaError, Optional
from subprocess import call

import os
import random
import requests
import urllib.request
import logging
import config


def convert(fmt, filename):
    extension = '.' + fmt.lower()
    output = filename.replace('.fasta',extension)
    logging.info('Converts %s in %s format and write in %s', filename, fmt, output)
    commande = 'squizz -c ' + fmt + ' ' + filename + ' > ' + output
    call(commande, shell=True)



def validation(args):
    """Data validation

    Checks arguments

    Args:
        args : all arguments

    Returns:
        right arguments
    """

    logging.info('Checks arguments')

    schema = Schema({
        Optional('-f'): And(list),
        Optional('--help'): bool})

    try:
        args = schema.validate(args)
    except SchemaError as e:
        exit(e)

    return args


def main():

    arg = docopt(doc)
    if arg ['-i']:
        level = logging.INFO
    if arg['-w']:
        level = logging.WARNING
    if arg ['-e']:
        level = logging.ERROR
    if arg['-c']:
        level = logging.CRITICAL
    if arg['-f']:
        filelog = 'converter.log'
    else:
        filelog = ''


    logging.basicConfig(
        filename=filelog,
        format='%(asctime)s %(levelname)s:%(message)s',
        datefmt='%m/%d/%Y %I:%M:%S %p',
        level=level)

    logging.info('Started')

    path = 'Result/' + config.dataset + '/'

    formats = config.formats_converter
    count = True

    family_file_name = path + 'Family_file.txt'

    with open (family_file_name, 'r') as f:
        family_file = f.read()
    f.closed

    filesdata = family_file.split('\t')
    filesdata = filesdata[:-1]

    for filename in filesdata:
        for fmt in formats:
            convert(fmt, filename)
            count = False

    commande = 'rm ' + family_file_name
    call(commande, shell=True)

    # Error messages
    if count:
        message = ('Hoho, no message =(')
        logging.error(message)

    logging.info('Finished')


if __name__ == "__main__":
    # execute only if run as a script
    main()